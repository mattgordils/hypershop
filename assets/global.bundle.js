/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/entries/global.js":
/*!*******************************!*\
  !*** ./src/entries/global.js ***!
  \*******************************/
/***/ (() => {

eval("class VariantSelects extends HTMLElement {\n  constructor() {\n    super();\n    this.addEventListener('change', this.onVariantChange);\n  }\n  onVariantChange(event) {\n    this.updateOptions();\n    this.updateMasterId();\n    this.toggleAddButton(true, '', false);\n    this.updatePickupAvailability();\n    this.removeErrorMessage();\n    if (!this.currentVariant) {\n      this.toggleAddButton(true, '', true);\n      this.setUnavailable();\n    } else {\n      this.updateMedia();\n      this.updateProductForm();\n      if (this.dataset.context !== 'card-product') {\n        this.updateURL();\n        this.updateShareUrl();\n      }\n      this.updateVariantInput();\n      this.renderProductInfo();\n    }\n  }\n  updateOptions() {\n    this.options = Array.from(this.querySelectorAll('select'), select => select.value);\n  }\n  updateMasterId() {\n    this.currentVariant = this.getVariantData().find(variant => {\n      return !variant.options.map((option, index) => {\n        return this.options[index] === option;\n      }).includes(false);\n    });\n  }\n  updateMedia() {\n    // TODO\n  }\n  updateURL() {\n    if (!this.currentVariant || this.dataset.updateUrl === 'false') return;\n    window.history.replaceState({}, '', `${this.dataset.url}?variant=${this.currentVariant.id}`);\n  }\n  updateProductForm() {\n    if (!this.currentVariant || this.dataset.updateUrl === 'false') return;\n    const currentVariantId = this.currentVariant.id;\n    let productForm = this.parentElement;\n    if (this.dataset.context !== 'card-product') {} else {\n      productForm = this.parentElement;\n    }\n    productForm.setAttribute('data-current-variant', currentVariantId);\n  }\n  updateShareUrl() {\n    const shareButton = document.getElementById(`Share-${this.dataset.section}`);\n    if (!shareButton || !shareButton.updateUrl) return;\n    shareButton.updateUrl(`${window.shopUrl}${this.dataset.url}?variant=${this.currentVariant.id}`);\n  }\n  updateVariantInput() {\n    const productForms = document.querySelectorAll(`#product-form-${this.dataset.section}, #product-form-installment-${this.dataset.section}, #quick-add-${this.dataset.productId}, #quick-add-slide-${this.dataset.productId}`);\n    productForms.forEach(productForm => {\n      const input = productForm.querySelector('input[name=\"id\"]');\n      input.value = this.currentVariant.id;\n      input.dispatchEvent(new Event('change', {\n        bubbles: true\n      }));\n    });\n  }\n  updatePickupAvailability() {\n    const pickUpAvailability = document.querySelector('pickup-availability');\n    if (!pickUpAvailability) return;\n    if (this.currentVariant && this.currentVariant.available && pickUpAvailability.fetchAvailability) {\n      pickUpAvailability.fetchAvailability(this.currentVariant.id);\n    } else {\n      pickUpAvailability.removeAttribute('available');\n      pickUpAvailability.innerHTML = '';\n    }\n  }\n  removeErrorMessage() {\n    const section = this.closest('section');\n    if (!section) return;\n    const productForm = section.querySelector('product-form');\n    if (productForm && productForm.handleErrorMessage) productForm.handleErrorMessage();\n  }\n  renderProductInfo() {\n    fetch(`${this.dataset.url}?variant=${this.currentVariant.id}&section_id=${this.dataset.originalSection ? this.dataset.originalSection : this.dataset.section}`).then(response => response.text()).then(responseText => {\n      const html = new DOMParser().parseFromString(responseText, 'text/html');\n      const destination = document.getElementById(`price-${this.dataset.section}`);\n      const source = html.getElementById(`price-${this.dataset.originalSection ? this.dataset.originalSection : this.dataset.section}`);\n      if (source && destination) destination.innerHTML = source.innerHTML;\n      const price = document.getElementById(`price-${this.dataset.section}`);\n      if (price) price.classList.remove('visibility-hidden');\n      this.toggleAddButton(!this.currentVariant.available, window.variantStrings.soldOut);\n    });\n  }\n  toggleAddButton(disable = true, text, modifyClass = true) {\n    const productForm = document.getElementById(`product-form-${this.dataset.section}`);\n    if (!productForm) return;\n    const addButton = productForm.querySelector('[name=\"add\"]');\n    // const addButtonText = productForm.querySelector('[name=\"add\"] > span');\n    if (!addButton) return;\n    if (disable) {\n      addButton.setAttribute('disabled', 'disabled');\n      // if (text) addButtonText.textContent = text;\n    } else {\n      addButton.removeAttribute('disabled');\n      // addButtonText.textContent = window.variantStrings.addToCart;\n    }\n\n    if (!modifyClass) return;\n  }\n  setUnavailable() {\n    const button = document.getElementById(`product-form-${this.dataset.section}`);\n    const addButton = button.querySelector('[name=\"add\"]');\n    const addButtonText = button.querySelector('[name=\"add\"] > span');\n    const price = document.getElementById(`price-${this.dataset.section}`);\n    if (!addButton) return;\n    addButtonText.textContent = window.variantStrings.unavailable;\n    if (price) price.classList.add('visibility-hidden');\n  }\n  getVariantData() {\n    this.variantData = this.variantData || JSON.parse(this.querySelector('[type=\"application/json\"]').textContent);\n    return this.variantData;\n  }\n}\ncustomElements.define('variant-selects', VariantSelects);\nclass VariantRadios extends VariantSelects {\n  constructor() {\n    super();\n  }\n  updateOptions() {\n    const fieldsets = Array.from(this.querySelectorAll('fieldset'));\n    this.options = fieldsets.map(fieldset => {\n      return Array.from(fieldset.querySelectorAll('input')).find(radio => radio.checked).value;\n    });\n    fieldsets.forEach(fieldSet => {\n      // Set all radios inactive\n      Array.from(fieldSet.querySelectorAll('input')).forEach(el => el.removeAttribute('checked'));\n      // Set radios active when value is an active option\n      Array.from(fieldSet.querySelectorAll('input')).forEach(el => {\n        if (this.options.includes(el.value)) {\n          el.setAttribute('checked', 'checked');\n        }\n      });\n    });\n  }\n}\ncustomElements.define('variant-radios', VariantRadios);\nif (!customElements.get('product-form')) {\n  customElements.define('product-form', class ProductForm extends HTMLElement {\n    constructor() {\n      super();\n      this.context = this.dataset.context || null;\n      this.form = this.querySelector('form');\n      this.form.querySelector('[name=id]').disabled = false;\n      this.form.addEventListener('submit', this.onSubmitHandler.bind(this));\n      this.cart = document.querySelector('cart-notification') || document.querySelector('cart-drawer');\n      this.qty = document.querySelector('quantity-input.pdp-quantity input');\n      this.submitButton = this.querySelector('[type=\"submit\"]');\n      this.loadingSpinner = this.context === 'cart-quick-add' ? this.querySelector('.cart-quick-add__spinner') : this.querySelector('.loading-overlay__spinner');\n      this.quickAdd = this.context === 'cart-quick-add' ? this.querySelector('.cart-quick-add__add') : null;\n      this.bundleItems = this.dataset.bundle || null;\n      this.bundleName = this.dataset.bundleName || null;\n      if (document.querySelector('cart-drawer')) {\n        this.submitButton.setAttribute('aria-haspopup', 'dialog');\n      }\n    }\n    onSubmitHandler(evt) {\n      const qty = this.qty.getAttribute('value');\n      evt.preventDefault();\n      if (this.submitButton.getAttribute('aria-disabled') === 'true') return;\n      this.handleErrorMessage();\n      this.submitButton.setAttribute('aria-disabled', true);\n      this.submitButton.classList.add('loading');\n      if (this.loadingSpinner) {\n        this.loadingSpinner.classList.remove('hidden');\n      }\n      if (this.quickAdd) {\n        this.quickAdd.classList.add('hidden');\n      }\n      let config = fetchConfig('javascript');\n      config.headers['X-Requested-With'] = 'XMLHttpRequest';\n      delete config.headers['Content-Type'];\n      const formData = new FormData(this.form);\n      if (this.cart) {\n        formData.append('sections', this.cart.getSectionsToRender().map(section => section.id));\n        formData.append('sections_url', window.location.pathname);\n        this.cart.setActiveElement(document.activeElement);\n      }\n      config.body = formData;\n      if (this.bundleItems !== null) {\n        const bundleItemIds = this.bundleItems.split(',');\n        var bundleName = this.bundleName;\n        const itemArray = [];\n        bundleItemIds.forEach(item => {\n          itemArray.push({\n            id: item,\n            quantity: qty,\n            properties: {\n              'bundle': bundleName\n            }\n          });\n        });\n        let bodyData = {\n          items: itemArray,\n          sections: this.cart.getSectionsToRender().map(section => section.id),\n          sections_url: window.location.pathname\n        };\n        config = fetchConfig('json');\n        config.body = JSON.stringify(bodyData);\n\n        ///\n        fetch(`${routes.cart_add_url}`, config).then(response => response.json()).then(response => {\n          if (response.product_id) {\n            if (window.cartItems.includes(response.product_id) === false) {\n              window.cartItems = [...window.cartItems, `${response.product_id}`];\n            }\n          }\n          if (response.status) {\n            this.handleErrorMessage(response.description);\n            const soldOutMessage = this.submitButton.querySelector('.sold-out-message');\n            if (!soldOutMessage) return;\n            this.submitButton.setAttribute('aria-disabled', true);\n            this.submitButton.querySelector('span').classList.add('hidden');\n            soldOutMessage.classList.remove('hidden');\n            this.error = true;\n            return;\n          } else if (!this.cart) {\n            window.location = window.routes.cart_url;\n            return;\n          }\n          this.error = false;\n          const quickAddModal = this.closest('quick-add-modal');\n          if (quickAddModal) {\n            document.body.addEventListener('modalClosed', () => {\n              setTimeout(() => {\n                this.cart.renderContents(response);\n              });\n            }, {\n              once: true\n            });\n            quickAddModal.hide(true);\n          } else {\n            this.cart.renderContents(response);\n          }\n        }).catch(e => {\n          console.error(e);\n        }).finally(() => {\n          this.submitButton.classList.remove('loading');\n          if (this.cart && this.cart.classList.contains('is-empty')) this.cart.classList.remove('is-empty');\n          if (!this.error) this.submitButton.removeAttribute('aria-disabled');\n          if (this.loadingSpinner) {\n            this.loadingSpinner.classList.add('hidden');\n          }\n          if (this.quickAdd) {\n            this.quickAdd.classList.remove('hidden');\n          }\n        });\n        ///\n      } else {\n        fetch(`${routes.cart_add_url}`, config).then(response => response.json()).then(response => {\n          if (response.product_id) {\n            if (window.cartItems.includes(response.product_id) === false) {\n              window.cartItems = [...window.cartItems, `${response.product_id}`];\n            }\n          }\n          if (response.status) {\n            this.handleErrorMessage(response.description);\n            const soldOutMessage = this.submitButton.querySelector('.sold-out-message');\n            if (!soldOutMessage) return;\n            this.submitButton.setAttribute('aria-disabled', true);\n            this.submitButton.querySelector('span').classList.add('hidden');\n            soldOutMessage.classList.remove('hidden');\n            this.error = true;\n            return;\n          } else if (!this.cart) {\n            window.location = window.routes.cart_url;\n            return;\n          }\n          this.error = false;\n          const quickAddModal = this.closest('quick-add-modal');\n          if (quickAddModal) {\n            document.body.addEventListener('modalClosed', () => {\n              setTimeout(() => {\n                this.cart.renderContents(response);\n              });\n            }, {\n              once: true\n            });\n            quickAddModal.hide(true);\n          } else {\n            this.cart.renderContents(response);\n          }\n        }).catch(e => {\n          console.error(e);\n        }).finally(() => {\n          this.submitButton.classList.remove('loading');\n          if (this.cart && this.cart.classList.contains('is-empty')) this.cart.classList.remove('is-empty');\n          if (!this.error) this.submitButton.removeAttribute('aria-disabled');\n          if (this.loadingSpinner) {\n            this.loadingSpinner.classList.add('hidden');\n          }\n          if (this.quickAdd) {\n            this.quickAdd.classList.remove('hidden');\n          }\n        });\n      }\n    }\n    handleErrorMessage(errorMessage = false) {\n      this.errorMessageWrapper = this.errorMessageWrapper || this.querySelector('.product-form__error-message-wrapper');\n      if (!this.errorMessageWrapper) return;\n      this.errorMessage = this.errorMessage || this.errorMessageWrapper.querySelector('.product-form__error-message');\n      this.errorMessageWrapper.toggleAttribute('hidden', !errorMessage);\n      if (errorMessage) {\n        this.errorMessage.textContent = errorMessage;\n      }\n    }\n  });\n}\n\n//# sourceURL=webpack://hypershop/./src/entries/global.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/entries/global.js"]();
/******/ 	
/******/ })()
;