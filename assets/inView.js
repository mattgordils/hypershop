customElements.get("in-view")||customElements.define("in-view",class extends HTMLElement{constructor(){super(),new IntersectionObserver(e=>{e[0].isIntersecting&&this.classList.add("in-view")},{threshold:.1}).observe(this)}}),customElements.get("parallax-view")||customElements.define("parallax-view",class extends HTMLElement{constructor(){super(),this.observer=new IntersectionObserver(e=>{const s=e[0];s.isIntersecting&&(console.log(s.intersectionRatio),this.classList.add("in-view")),console.log(s.intersectionRatio)},{threshold:.5})}connectedCallback(){this.onScrollHandler=this.onScroll.bind(this),window.addEventListener("scroll",this.onScrollHandler,!1)}onScroll(){const e=window.innerHeight,s=window.scrollY,t=this.offsetTop,n=Math.round((s+e-t)/(e+this.offsetHeight)*100);n>=0&&n<=100&&(this.style.cssText="--percentage: "+n/100)}});