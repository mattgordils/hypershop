{%-liquid
  assign products_to_show = 4
-%}

<div class="{{ section.settings.section_margin }}">
  <div class="page-width px-margin mx-auto mb-v-spacing-sm">
    <h2 class="h3">{{ section.settings.heading | escape }}</h2>
  </div>
  <div class="page-width px-margin mx-auto">
    <product-recommendations class="product-recommendations" data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit={{ products_to_show }}&intent=related">
      {% if recommendations.performed and recommendations.products_count > 0 %}
        <ul class="grid grid-cols-4 gap-x-gutter" role="list">
          {% for recommendation in recommendations.products %}
            <li class="grid-item">
              {% render 'card-product',
                card_product: recommendation,
                show_vendor: section.settings.show_vendor,
                show_rating: section.settings.show_rating
              %}
            </li>
          {% endfor %}
        </ul>
      {% endif %}
    </product-recommendations>
  </div>
</div>

{% javascript %}
  class ProductRecommendations extends HTMLElement {
    constructor() {
      super();

      const handleIntersection = (entries, observer) => {
        if (!entries[0].isIntersecting) return;
        observer.unobserve(this);

        fetch(this.dataset.url)
          .then(response => response.text())
          .then(text => {
            const html = document.createElement('div');
            html.innerHTML = text;
            const recommendations = html.querySelector('product-recommendations');

            if (recommendations && recommendations.innerHTML.trim().length) {
              this.innerHTML = recommendations.innerHTML;
            }

            if (html.querySelector('.grid-item')) {
              this.classList.add('product-recommendations--loaded');
            }
          })
          .catch(e => {
            console.error(e);
          });
      }

      new IntersectionObserver(handleIntersection.bind(this), {rootMargin: '-200px 0px 200px 0px'}).observe(this);
    }
  }

  customElements.define('product-recommendations', ProductRecommendations);
{% endjavascript %}

{% schema %}
{
  "name": "Product Recommendations",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "paragraph",
      "content": "t:sections.product-recommendations.settings.paragraph__1.content"
    },
    {
      "type": "text",
      "id": "heading",
      "default": "You may also like",
      "label": "t:sections.product-recommendations.settings.heading.label"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "default": false,
      "label": "t:sections.product-recommendations.settings.show_vendor.label"
    },
    {
      "type": "checkbox",
      "id": "show_rating",
      "default": false,
      "label": "t:sections.product-recommendations.settings.show_rating.label",
      "info": "t:sections.product-recommendations.settings.show_rating.info"
    },
    {
      "type": "select",
      "id": "section_margin",
      "default": "mb-v-spacing",
      "label": "Section Margin",
      "info": "This can be used to adjust or remove the space below this section",
      "options": [
        {
          "label": "none",
          "value": "mb-0"
        },
        {
          "label": "Small",
          "value": "mb-v-spacing-sm"
        },
        {
          "label": "Medium",
          "value": "mb-v-spacing"
        },
        {
          "label": "Large",
          "value": "mb-v-spacing-lg"
        }
      ]
    }
  ]
}
{% endschema %}
